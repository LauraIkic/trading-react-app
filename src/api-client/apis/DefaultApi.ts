/* tslint:disable */
/* eslint-disable */
/**
 * Auth & CoinInfo API
 * API for authentication and coin data
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthResponseDto,
  CoinDto,
  LoginRequestDto,
  SignupRequestDto,
  WalletRequestDto,
} from '../models/index';
import {
    AuthResponseDtoFromJSON,
    AuthResponseDtoToJSON,
    CoinDtoFromJSON,
    CoinDtoToJSON,
    LoginRequestDtoFromJSON,
    LoginRequestDtoToJSON,
    SignupRequestDtoFromJSON,
    SignupRequestDtoToJSON,
    WalletRequestDtoFromJSON,
    WalletRequestDtoToJSON,
} from '../models/index';

export interface CoinIdGetRequest {
    id: string;
}

export interface CreateUserRequest {
    signupRequestDto: SignupRequestDto;
}

export interface LoginUserRequest {
    loginRequestDto: LoginRequestDto;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get a specific coin by ID
     */
    async coinIdGetRaw(requestParameters: CoinIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coinIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coin/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinDtoFromJSON(jsonValue));
    }

    /**
     * Get a specific coin by ID
     */
    async coinIdGet(requestParameters: CoinIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinDto> {
        const response = await this.coinIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User signup
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponseDto>> {
        if (requestParameters['signupRequestDto'] == null) {
            throw new runtime.RequiredError(
                'signupRequestDto',
                'Required parameter "signupRequestDto" was null or undefined when calling createUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupRequestDtoToJSON(requestParameters['signupRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseDtoFromJSON(jsonValue));
    }

    /**
     * User signup
     */
    async createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponseDto> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User login
     */
    async loginUserRaw(requestParameters: LoginUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponseDto>> {
        if (requestParameters['loginRequestDto'] == null) {
            throw new runtime.RequiredError(
                'loginRequestDto',
                'Required parameter "loginRequestDto" was null or undefined when calling loginUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestDtoToJSON(requestParameters['loginRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseDtoFromJSON(jsonValue));
    }

    /**
     * User login
     */
    async loginUser(requestParameters: LoginUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponseDto> {
        const response = await this.loginUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of all coins
     */
    async readCoinsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CoinDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoinDtoFromJSON));
    }

    /**
     * Get list of all coins
     */
    async readCoins(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CoinDto>> {
        const response = await this.readCoinsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get wallet balance
     */
    async walletGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WalletRequestDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wallet`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WalletRequestDtoFromJSON));
    }

    /**
     * Get wallet balance
     */
    async walletGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WalletRequestDto>> {
        const response = await this.walletGetRaw(initOverrides);
        return await response.value();
    }

}
